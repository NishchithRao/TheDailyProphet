{"version":3,"sources":["helpers/Vars.js","helpers/apicalls.js","components/Header.js","helpers/StringHelper.js","components/TopNews.js","components/Loader.js","App.js","serviceWorker.js","index.js"],"names":["URL","process","KEY","AllNews","a","fetch","response","json","data","SearchNews","query","Header","useState","Date","date","className","getDate","getMonth","getFullYear","localStorage","getItem","coloredLetter","string","split","TopNews","topnews","classType","featured","minFontSize","title","substring","indexOf","lastIndexOf","editTitle","subTitle","urlToImage","source","name","alt","src","content","description","editContent","editDescription","href","url","Loader","class","App","setData","useEffect","HomeData","then","setItem","getHours","getMinutes","getSeconds","JSON","stringify","articles","catch","err","parse","onClick","map","q","alert","SearchData","item","index","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.99faf328.chunk.js","sourcesContent":["export const URL = process.env.REACT_APP_URL;\nexport const KEY = process.env.REACT_APP_KEY;\n","import {URL,KEY} from './Vars.js';\n\nexport const AllNews =  async () => {\n\tconst response = await fetch(`${URL}=${KEY}`);\n\tconst data = await response.json();\n\treturn data;\n}\n\nexport const SearchNews = async query => {\n\tconst response = await fetch(`${URL}=${KEY}&q=${query}`);\n\tconst data = await response.json();\n\treturn data ;\n}\n","import React,{useState} from 'react';\nimport '../css/Header.css';\n\nconst Header = () => {\n\tconst [date,setDate] = useState(new Date());\n\treturn(\n\t\t<div className=\"header\">\n\t\t<h1>DAILY PROPHET</h1>\n\t\t<div className=\"timeDet\">\n\t\t<div className=\"currentDate\">{`${date.getDate()}/${date.getMonth()}/${date.getFullYear()}`}</div>\n\t\t<div className=\"fetchTime\">Fetched At:{localStorage.getItem(\"date\")}</div>\n\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Header;\n","export const restTitle = string => {\n\treturn string.substring(1,string.lastIndexOf(\"-\"));\n}\n\nexport const coloredWord = string => {\n\treturn string.split(\" \")[0];\n}\n\nexport const coloredLetter = string => {\n\treturn string.split(\"\")[0];\n}\n\nexport const editContent = string => {\n\treturn string && string.substring(1,string.lastIndexOf(\"[\"));\n}\n\nexport const editTitle = string => {\n\treturn string.substring(string.indexOf(\" \"),string.lastIndexOf(\"-\"));\n}\n\nexport const editDescription = string => {\n\treturn string && string.substring(1);\n}\n\nexport const subTitle = string => {\n\treturn string.substring(0,string.lastIndexOf(\"-\"));\n}\n","import React,{useState,useEffect} from 'react';\nimport '../css/TopNews.css';\nimport '../css/SubNews.css';\nimport ReactFitText from 'react-fittext';\nimport {coloredWord,editTitle,coloredLetter,editContent,editDescription,restTitle,subTitle} from '../helpers/StringHelper.js';\n\nconst TopNews = ({topnews,classType,featured}) => {\t\n\treturn(\n\t\t<div className={classType}>\n\t\t\n\t\t{ featured && <ReactFitText minFontSize={38}>\n\t\t<div className=\"featuredTitle\">{coloredWord(topnews.title)}</div>\n\t\t</ReactFitText>}\n\t\t<div className=\"title\">{featured ?editTitle(topnews.title) : subTitle(topnews.title)}</div>\n\t\t\n\t\t{ topnews.urlToImage && <div className=\"imgCon\">                        <div className=\"publisher\">{\"- \"+topnews.source.name}</div>                                                       <img alt={topnews.title}  src={topnews.urlToImage} />\n                </div>}\n\t<p>\n                <span>{topnews.content ? coloredLetter(topnews.content) : topnews.description && coloredLetter(topnews.description)}</span>\n                {topnews.content ? editContent(topnews.content): topnews.description && editDescription(topnews.description)}                                                              </p>\n\t\t<button><a href={topnews.url}>Read More</a></button>\n\t\t</div>\n\t\t\n\t);\n}\n\nexport default TopNews;\n","import React from 'react';\nimport '../css/Loader.css';\n\nconst Loader = () => {\n\treturn(\n\t\t<div class=\"loader\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n\t);\n}\n\nexport default Loader;\n","import React,{useState,useEffect,Fragment} from 'react';\nimport './App.css';\nimport {AllNews,SearchNews} from './helpers/apicalls';\nimport Header from './components/Header';\nimport TopNews from './components/TopNews';\nimport Loader from './components/Loader';\n\nfunction App() {\n\tconst [data,setData] = useState(\"\");\n\tconst [query,setQuery] = useState([\"entertainment\",\"tech\",\"sport\",\"politics\",\"education\",\"business\",\"crime\"]);\n\tconst [date] = useState(new Date());\n\tuseEffect(() => {\n\t\tlet triggeredPrompt;\n\t\tHomeData();\n\t},[]);\n\tconst HomeData = () => {\n\t\tAllNews().then(data =>{\n\t\t\tlocalStorage.setItem(\"date\",`${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`);\n                        localStorage.setItem(\"data\",JSON.stringify(data));                                                  setData(data.articles)}).catch(err => setData(JSON.parse(localStorage.getItem(\"data\")).articles));\n\t}\n\n\tconst SearchData = query => {\n\t\tSearchNews(query).                                        then(data =>{\n\t\t\tlocalStorage.setItem(\"date\",`${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`);                                                  setData(data.articles)}).                 catch(err => alert(err));\n\t}\n  return (\n    <div className=\"App\">\n\t  {!data ? <Loader /> : (\n\t\t  <div className=\"container\">\n\t\t  <Header />\n\t\t  <div className=\"divider\"></div>\n\t\t  <div className=\"categories\">\n\t\t  <button onClick={HomeData}>All</button>\n\t\t  {\n\t\t\t  query.map(q => (\n\t\t\t\t  <button onClick={() => SearchData(q)}>{q}</button>\n\t\t\t  ))\n\t  }\n\t\t  </div>\n\t\t  { data.map((item,index) => (\n\t\t  <div className=\"newsItem\">\n\t\t\t  {index%4==0 ?\n\t\t  (\n\t\t\t  <Fragment>\n\t\t\t  <div className=\"divider\"></div>\n\t\t\t  <div className=\"mainNews\">\n\t\t  <TopNews classType=\"topnews\" featured={true} topnews ={item}/>\n\t\t  </div>\n\t\t\t  </Fragment>\n\t\t  ) :\n\t\t\t\t  <Fragment>\n\t\t\t\t  <div className=\"single_divider\"></div>\n\t\t  <TopNews topnews={item} classType=\"smallnews\" />\n\t\t\t\t  </Fragment>\n\t\t\t  }\n\t\t\t  \n\t\t  </div>\n\t\t  ))\n\t\t  }\n\t\t  </div>\n\t  )}\n\t  <div className=\"divider\"></div>\n\n\t  <div className=\"footer\">\n\t  <div className=\"developer\">Designed and Developed by <a target=\"_blank\" href=\"https://www.instagram.com/dev_monk_4/\"><span>Nishchith Rao</span></a></div>\n\t  </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n\t    alert('Error during service worker registration:');\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n\t    alert(\"offline\");\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}